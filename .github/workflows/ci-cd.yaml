name: CI & CD — Docker & Kubernetes

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # -----------------------
  # CI Stage 1: Checkout & Docker Login
  # -----------------------
  CI_Checkout_Login:
    runs-on: ubuntu-latest
    steps:
      - name: Stage 1 — Checkout Code
        run: |
          echo "===== Stage 1: Checkout ====="
        shell: bash
      - uses: actions/checkout@v4

      - name: Stage 1 — Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

  # -----------------------
  # CI Stage 2: Build & Push Image
  # -----------------------
  CI_Build_Push:
    needs: CI_Checkout_Login
    runs-on: ubuntu-latest
    steps:
      - name: Stage 2 — Checkout Code
        uses: actions/checkout@v4

      - name: Stage 2 — Build & Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/hello-kubernetes:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/hello-kubernetes:${{ github.sha }}

  # -----------------------
  # CD Stage 1: Verify Cluster Access
  # -----------------------
  CD_Verify_Cluster:
    needs: CI_Build_Push
    runs-on: [self-hosted, ec2-k3s]
    steps:
      - name: Stage 1 — Checkout Code
        uses: actions/checkout@v4

      - name: Stage 1 — Verify Kubernetes Cluster
        run: |
          echo "===== Stage 1: Verifying Cluster ====="
          sudo kubectl get nodes
          sudo kubectl get pods -A

  # -----------------------
  # CD Stage 2: Deploy to Kubernetes
  # -----------------------
  CD_Deploy:
    needs: CD_Verify_Cluster
    runs-on: [self-hosted, ec2-k3s]
    steps:
      - name: Stage 2 — Checkout Code
        uses: actions/checkout@v4

      - name: Stage 2 — Deploy Application
        run: |
          echo "===== Stage 2: Deploying to Kubernetes ====="
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/hello-kubernetes:latest
          sudo kubectl set image deployment/hello-kubernetes hello-kubernetes=$IMAGE --record
          sudo kubectl rollout status deployment/hello-kubernetes --timeout=120s

      - name: Stage 2 — Show Service Info
        run: |
          sudo kubectl get svc hello-kubernetes-service
